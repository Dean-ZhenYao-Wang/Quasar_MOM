// <auto-generated />
using System;
using MOM.Infrastructure.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MOM.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MOM.Domain.CodingRule.SequenceState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentValue")
                        .HasColumnType("int");

                    b.Property<string>("ModelTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SequenceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SequenceStates");
                });

            modelBuilder.Entity("MOM.Domain.Common.BaseEntity", b =>
                {
                    b.Property<Guid>("DtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DtId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("MOM.Domain.Common.BasicRelationship", b =>
                {
                    b.Property<Guid>("DtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Depth")
                        .HasColumnType("int");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DtId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("MOM.Domain.Permission.AvailablePermission", b =>
                {
                    b.Property<Guid>("DtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<string>("MenuButtonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PersonDtId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DtId");

                    b.HasIndex("PersonDtId");

                    b.ToTable("AvailablePermissions");
                });

            modelBuilder.Entity("MOM.Domain.Permission.OrgPermission", b =>
                {
                    b.Property<Guid>("DtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MenuButtonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrgDtId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DtId");

                    b.HasIndex("OrgDtId");

                    b.ToTable("OrgPermission");
                });

            modelBuilder.Entity("MOM.Domain.Permission.PersonnelClassPermission", b =>
                {
                    b.Property<Guid>("DtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MenuButtonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PersonnelClassDtId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DtId");

                    b.HasIndex("PersonnelClassDtId");

                    b.ToTable("PersonnelClassPermission");
                });

            modelBuilder.Entity("MOM.Domain.CodingRule.CodingRule", b =>
                {
                    b.HasBaseType("MOM.Domain.Common.BaseEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModelTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Separator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("CodingRules");
                });

            modelBuilder.Entity("MOM.Domain.CodingRule.CodingSegment", b =>
                {
                    b.HasBaseType("MOM.Domain.Common.BaseEntity");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<bool>("PadLeft")
                        .HasColumnType("bit");

                    b.Property<string>("PaddingChar")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<Guid>("RuleDtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("RuleDtId");

                    b.ToTable("CodingSegments");
                });

            modelBuilder.Entity("MOM.Domain.Permission.Button", b =>
                {
                    b.HasBaseType("MOM.Domain.Common.BaseEntity");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MenuDtId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("MenuDtId");

                    b.ToTable("Buttons");
                });

            modelBuilder.Entity("MOM.Domain.Permission.Menu", b =>
                {
                    b.HasBaseType("MOM.Domain.Common.BaseEntity");

                    b.Property<bool>("AlwaysShow")
                        .HasColumnType("bit");

                    b.Property<int>("Depth")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Hidden")
                        .HasColumnType("bit");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentMenuDtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("ParentMenuDtId");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("MOM.Domain.isa95.CommonObjectModels.HierarchyScope", b =>
                {
                    b.HasBaseType("MOM.Domain.Common.BaseEntity");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquipmentID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EquipmentLevel")
                        .HasColumnType("int");

                    b.Property<string>("FullPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ResponsibleDtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SourceDtId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("ResponsibleDtId");

                    b.HasIndex("SourceDtId");

                    b.ToTable("HierarchyScope", (string)null);
                });

            modelBuilder.Entity("MOM.Domain.isa95.CommonObjectModels.Part2.OperationalLocation.OperationalLocation", b =>
                {
                    b.HasBaseType("MOM.Domain.Common.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("HierarchyScopeRelDtId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("HierarchyScopeRelDtId");

                    b.ToTable("OperationalLocation", (string)null);
                });

            modelBuilder.Entity("MOM.Domain.isa95.CommonObjectModels.Part2.OperationalLocation.OperationalLocationClass", b =>
                {
                    b.HasBaseType("MOM.Domain.Common.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("HierarchyScopeRelDtId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("HierarchyScopeRelDtId");

                    b.ToTable("OperationalLocationClass", (string)null);
                });

            modelBuilder.Entity("MOM.Domain.isa95.CommonObjectModels.Part2.Personnel.Person", b =>
                {
                    b.HasBaseType("MOM.Domain.Common.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<Guid?>("HierarchyScopeRelDtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LockoutDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutOnFailure")
                        .HasColumnType("bit");

                    b.Property<string>("OperationalLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OperationalLocationType")
                        .HasColumnType("int");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkStatus")
                        .HasColumnType("int");

                    b.HasIndex("HierarchyScopeRelDtId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("MOM.Domain.isa95.CommonObjectModels.Part2.Personnel.PersonnelClass", b =>
                {
                    b.HasBaseType("MOM.Domain.Common.BaseEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("HierarchyScopeRelDtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ResponsibleDtId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("HierarchyScopeRelDtId");

                    b.HasIndex("ResponsibleDtId");

                    b.ToTable("PersonnelClasses");
                });

            modelBuilder.Entity("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.Equipment", b =>
                {
                    b.HasBaseType("MOM.Domain.Common.BaseEntity");

                    b.Property<DateTime?>("DateOfPurchase")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepreciationLife")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EnabledTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EquipmentLevel")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FactoryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FactoryNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("HierarchyScopeRelDtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("InitialPrice")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("ModelNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ResponsibleDtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Specification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Supplier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UseOrgDtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("WarrantyPeriod")
                        .HasColumnType("datetime2");

                    b.HasIndex("HierarchyScopeRelDtId")
                        .IsUnique()
                        .HasFilter("[HierarchyScopeRelDtId] IS NOT NULL");

                    b.HasIndex("ResponsibleDtId");

                    b.HasIndex("UseOrgDtId");

                    b.ToTable("Equipment", (string)null);
                });

            modelBuilder.Entity("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.EquipmentClass", b =>
                {
                    b.HasBaseType("MOM.Domain.Common.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EquipmentLevel")
                        .HasColumnType("int");

                    b.Property<Guid?>("HierarchyScopeRelDtId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("HierarchyScopeRelDtId");

                    b.ToTable("EquipmentClass", (string)null);
                });

            modelBuilder.Entity("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.PhysicalAsset", b =>
                {
                    b.HasBaseType("MOM.Domain.Common.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FixedAssetID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("HierarchyScopeRelDtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhysicalLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PhysicalLocationRelDtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PhysicalLocationType")
                        .HasColumnType("int");

                    b.Property<string>("VendorID")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("HierarchyScopeRelDtId");

                    b.HasIndex("PhysicalLocationRelDtId");

                    b.ToTable("PhysicalAsset", (string)null);
                });

            modelBuilder.Entity("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.PhysicalAssetClass", b =>
                {
                    b.HasBaseType("MOM.Domain.Common.BaseEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("HierarchyScopeRelDtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("HierarchyScopeRelDtId");

                    b.ToTable("PhysicalAssetClass", (string)null);
                });

            modelBuilder.Entity("MOM.Domain.Common.Relationship.isa95.Equipment.EquipmentDefinedByRelationship", b =>
                {
                    b.HasBaseType("MOM.Domain.Common.BasicRelationship");

                    b.HasIndex("SourceId");

                    b.HasIndex("TargetId");

                    b.ToTable("EquipmentDefinedByRelationship");
                });

            modelBuilder.Entity("MOM.Domain.Common.Relationship.isa95.Equipment.EquipmentImplementedByRelationship", b =>
                {
                    b.HasBaseType("MOM.Domain.Common.BasicRelationship");

                    b.HasIndex("SourceId")
                        .IsUnique();

                    b.HasIndex("TargetId");

                    b.ToTable("EquipmentImplementedByRelationship");
                });

            modelBuilder.Entity("MOM.Domain.Common.Relationship.isa95.Equipment.EquipmentIsMadeUpOfRelationship", b =>
                {
                    b.HasBaseType("MOM.Domain.Common.BasicRelationship");

                    b.HasIndex("SourceId");

                    b.HasIndex("TargetId");

                    b.ToTable("EquipmentIsMadeUpOfRelationship");
                });

            modelBuilder.Entity("MOM.Domain.Common.Relationship.isa95.EquipmentClass.EquipmentClassIncludesPropertiesOfRelationship", b =>
                {
                    b.HasBaseType("MOM.Domain.Common.BasicRelationship");

                    b.HasIndex("SourceId");

                    b.HasIndex("TargetId");

                    b.ToTable("EquipmentClassIncludesPropertiesOfRelationship");
                });

            modelBuilder.Entity("MOM.Domain.Common.Relationship.isa95.EquipmentClass.EquipmentClassIsMadeUpOfRelationship", b =>
                {
                    b.HasBaseType("MOM.Domain.Common.BasicRelationship");

                    b.HasIndex("SourceId");

                    b.HasIndex("TargetId");

                    b.ToTable("EquipmentClassIsMadeUpOfRelationship");
                });

            modelBuilder.Entity("MOM.Domain.Common.Relationship.isa95.HierarchyScope.HierarchyScopeContainsRelationship", b =>
                {
                    b.HasBaseType("MOM.Domain.Common.BasicRelationship");

                    b.HasIndex("SourceId");

                    b.HasIndex("TargetId");

                    b.ToTable("HierarchyScopeContainsRelationship");
                });

            modelBuilder.Entity("MOM.Domain.Common.Relationship.isa95.OperationalLocation.OperationalLocationDefinedByRelationship", b =>
                {
                    b.HasBaseType("MOM.Domain.Common.BasicRelationship");

                    b.HasIndex("SourceId");

                    b.HasIndex("TargetId");

                    b.ToTable("OperationalLocationDefinedByRelationship");
                });

            modelBuilder.Entity("MOM.Domain.Common.Relationship.isa95.OperationalLocation.OperationalLocationIsMadeUpOfRelationship", b =>
                {
                    b.HasBaseType("MOM.Domain.Common.BasicRelationship");

                    b.HasIndex("SourceId");

                    b.HasIndex("TargetId");

                    b.ToTable("OperationalLocationIsMadeUpOfRelationship");
                });

            modelBuilder.Entity("MOM.Domain.Common.Relationship.isa95.OperationalLocationClass.OperationalLocationClassIncludesPropertiesOfRelationship", b =>
                {
                    b.HasBaseType("MOM.Domain.Common.BasicRelationship");

                    b.HasIndex("SourceId");

                    b.HasIndex("TargetId");

                    b.ToTable("OperationalLocationClassIncludesPropertiesOfRelationship");
                });

            modelBuilder.Entity("MOM.Domain.Common.Relationship.isa95.OperationalLocationClass.OperationalLocationClassIsMadeUpOfRelationship", b =>
                {
                    b.HasBaseType("MOM.Domain.Common.BasicRelationship");

                    b.HasIndex("SourceId");

                    b.HasIndex("TargetId");

                    b.ToTable("OperationalLocationClassIsMadeUpOfRelationship");
                });

            modelBuilder.Entity("MOM.Domain.Common.Relationship.isa95.Person.PersonDefinedByRelationship", b =>
                {
                    b.HasBaseType("MOM.Domain.Common.BasicRelationship");

                    b.HasIndex("SourceId");

                    b.HasIndex("TargetId");

                    b.ToTable("PersonDefinedByRelationship");
                });

            modelBuilder.Entity("MOM.Domain.Common.Relationship.isa95.Person.PersonHierarchyScopeRelRelationship", b =>
                {
                    b.HasBaseType("MOM.Domain.Common.BasicRelationship");

                    b.HasIndex("SourceId");

                    b.HasIndex("TargetId");

                    b.ToTable("PersonHierarchyScopeRelRelationship");
                });

            modelBuilder.Entity("MOM.Domain.Common.Relationship.isa95.PersonnelClass.PersonnelClassIncludesPropertiesOfRelationship", b =>
                {
                    b.HasBaseType("MOM.Domain.Common.BasicRelationship");

                    b.HasIndex("SourceId");

                    b.HasIndex("TargetId");

                    b.ToTable("PersonnelClassIncludesPropertiesOfRelationships");
                });

            modelBuilder.Entity("MOM.Domain.Common.Relationship.isa95.PhysicalAsset.PhysicalAssetDefinedByRelationship", b =>
                {
                    b.HasBaseType("MOM.Domain.Common.BasicRelationship");

                    b.HasIndex("SourceId");

                    b.HasIndex("TargetId");

                    b.ToTable("PhysicalAssetDefinedByRelationship");
                });

            modelBuilder.Entity("MOM.Domain.Common.Relationship.isa95.PhysicalAsset.PhysicalAssetIsMadeUpOfRelationship", b =>
                {
                    b.HasBaseType("MOM.Domain.Common.BasicRelationship");

                    b.HasIndex("SourceId");

                    b.HasIndex("TargetId");

                    b.ToTable("PhysicalAssetIsMadeUpOfRelationship");
                });

            modelBuilder.Entity("MOM.Domain.Common.Relationship.isa95.PhysicalAssetClass.PhysicalAssetClassIncludesPropertiesOfRelationship", b =>
                {
                    b.HasBaseType("MOM.Domain.Common.BasicRelationship");

                    b.HasIndex("SourceId");

                    b.HasIndex("TargetId");

                    b.ToTable("PhysicalAssetClassIncludesPropertiesOfRelationship");
                });

            modelBuilder.Entity("MOM.Domain.Common.Relationship.isa95.PhysicalAssetClass.PhysicalAssetClassIsMadeUpOfRelationship", b =>
                {
                    b.HasBaseType("MOM.Domain.Common.BasicRelationship");

                    b.HasIndex("SourceId");

                    b.HasIndex("TargetId");

                    b.ToTable("PhysicalAssetClassIsMadeUpOfRelationship");
                });

            modelBuilder.Entity("MOM.Domain.Permission.AvailablePermission", b =>
                {
                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.Personnel.Person", "Person")
                        .WithMany("AvailablePermissions")
                        .HasForeignKey("PersonDtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("MOM.Domain.Permission.OrgPermission", b =>
                {
                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.HierarchyScope", "Org")
                        .WithMany("Permissions")
                        .HasForeignKey("OrgDtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Org");
                });

            modelBuilder.Entity("MOM.Domain.Permission.PersonnelClassPermission", b =>
                {
                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.Personnel.PersonnelClass", "PersonnelClass")
                        .WithMany("Permissions")
                        .HasForeignKey("PersonnelClassDtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonnelClass");
                });

            modelBuilder.Entity("MOM.Domain.CodingRule.CodingSegment", b =>
                {
                    b.HasOne("MOM.Domain.CodingRule.CodingRule", "Rule")
                        .WithMany("Segments")
                        .HasForeignKey("RuleDtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rule");
                });

            modelBuilder.Entity("MOM.Domain.Permission.Button", b =>
                {
                    b.HasOne("MOM.Domain.Permission.Menu", "Menu")
                        .WithMany("Buttons")
                        .HasForeignKey("MenuDtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("MOM.Domain.Permission.Menu", b =>
                {
                    b.HasOne("MOM.Domain.Permission.Menu", "ParentMenu")
                        .WithMany("Children")
                        .HasForeignKey("ParentMenuDtId");

                    b.Navigation("ParentMenu");
                });

            modelBuilder.Entity("MOM.Domain.isa95.CommonObjectModels.HierarchyScope", b =>
                {
                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.Personnel.Person", "Responsible")
                        .WithMany()
                        .HasForeignKey("ResponsibleDtId");

                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.HierarchyScope", "Source")
                        .WithMany()
                        .HasForeignKey("SourceDtId");

                    b.Navigation("Responsible");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("MOM.Domain.isa95.CommonObjectModels.Part2.OperationalLocation.OperationalLocation", b =>
                {
                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.HierarchyScope", "HierarchyScopeRel")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeRelDtId");

                    b.OwnsOne("MOM.Domain.isa95.CommonObjectModels.SpatialDefinition", "SpatialDefinition", b1 =>
                        {
                            b1.Property<Guid>("OperationalLocationDtId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SRIAuthority")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SRID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationalLocationDtId");

                            b1.ToTable("OperationalLocation");

                            b1.WithOwner()
                                .HasForeignKey("OperationalLocationDtId");
                        });

                    b.OwnsOne("MOM.Domain.isa95.CommonObjectModels.Part2.OperationalLocation.OperationalLocationProperty", "HasValuesOf", b1 =>
                        {
                            b1.Property<Guid>("OperationalLocationDtId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("OperationalLocationDtId");

                            b1.ToTable("OperationalLocation");

                            b1.WithOwner()
                                .HasForeignKey("OperationalLocationDtId");
                        });

                    b.Navigation("HasValuesOf")
                        .IsRequired();

                    b.Navigation("HierarchyScopeRel");

                    b.Navigation("SpatialDefinition")
                        .IsRequired();
                });

            modelBuilder.Entity("MOM.Domain.isa95.CommonObjectModels.Part2.OperationalLocation.OperationalLocationClass", b =>
                {
                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.HierarchyScope", "HierarchyScopeRel")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeRelDtId");

                    b.OwnsOne("MOM.Domain.isa95.CommonObjectModels.Part2.OperationalLocation.OperationalLocationClassProperty", "Property", b1 =>
                        {
                            b1.Property<Guid>("OperationalLocationClassDtId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("OperationalLocationClassDtId");

                            b1.ToTable("OperationalLocationClass");

                            b1.WithOwner()
                                .HasForeignKey("OperationalLocationClassDtId");
                        });

                    b.Navigation("HierarchyScopeRel");

                    b.Navigation("Property")
                        .IsRequired();
                });

            modelBuilder.Entity("MOM.Domain.isa95.CommonObjectModels.Part2.Personnel.Person", b =>
                {
                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.HierarchyScope", "HierarchyScopeRel")
                        .WithMany("Peoples")
                        .HasForeignKey("HierarchyScopeRelDtId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.OwnsOne("MOM.Domain.Common.ContactInformation", "ContactInformation", b1 =>
                        {
                            b1.Property<Guid>("PersonDtId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Email")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PhoneNumber")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonDtId");

                            b1.ToTable("Person");

                            b1.WithOwner()
                                .HasForeignKey("PersonDtId");
                        });

                    b.OwnsOne("MOM.Domain.isa95.CommonObjectModels.SpatialDefinition", "SpatialDefinition", b1 =>
                        {
                            b1.Property<Guid>("PersonDtId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SRIAuthority")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SRID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonDtId");

                            b1.ToTable("Person");

                            b1.WithOwner()
                                .HasForeignKey("PersonDtId");
                        });

                    b.OwnsOne("MOM.Domain.isa95.CommonObjectModels.Part2.Personnel.PersonProperty", "Property", b1 =>
                        {
                            b1.Property<Guid>("PersonDtId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("PersonDtId");

                            b1.ToTable("Person");

                            b1.WithOwner()
                                .HasForeignKey("PersonDtId");
                        });

                    b.Navigation("ContactInformation")
                        .IsRequired();

                    b.Navigation("HierarchyScopeRel");

                    b.Navigation("Property")
                        .IsRequired();

                    b.Navigation("SpatialDefinition");
                });

            modelBuilder.Entity("MOM.Domain.isa95.CommonObjectModels.Part2.Personnel.PersonnelClass", b =>
                {
                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.HierarchyScope", "HierarchyScopeRel")
                        .WithMany("Teams")
                        .HasForeignKey("HierarchyScopeRelDtId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.Personnel.Person", "Responsible")
                        .WithMany()
                        .HasForeignKey("ResponsibleDtId");

                    b.OwnsOne("MOM.Domain.isa95.CommonObjectModels.Part2.Personnel.PersonnelClassProperty", "Property", b1 =>
                        {
                            b1.Property<Guid>("PersonnelClassDtId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("PersonnelClassDtId");

                            b1.ToTable("PersonnelClasses");

                            b1.WithOwner()
                                .HasForeignKey("PersonnelClassDtId");
                        });

                    b.Navigation("HierarchyScopeRel");

                    b.Navigation("Property")
                        .IsRequired();

                    b.Navigation("Responsible");
                });

            modelBuilder.Entity("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.Equipment", b =>
                {
                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.HierarchyScope", "HierarchyScopeRel")
                        .WithOne()
                        .HasForeignKey("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.Equipment", "HierarchyScopeRelDtId");

                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.Personnel.Person", "Responsible")
                        .WithMany()
                        .HasForeignKey("ResponsibleDtId");

                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.Personnel.PersonnelClass", "UseOrg")
                        .WithMany()
                        .HasForeignKey("UseOrgDtId");

                    b.OwnsOne("MOM.Domain.isa95.CommonObjectModels.SpatialDefinition", "SpatialDefinition", b1 =>
                        {
                            b1.Property<Guid>("EquipmentDtId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SRIAuthority")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SRID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EquipmentDtId");

                            b1.ToTable("Equipment");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentDtId");
                        });

                    b.OwnsOne("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.EquipmentProperty", "Property", b1 =>
                        {
                            b1.Property<Guid>("EquipmentDtId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("EquipmentDtId");

                            b1.ToTable("Equipment");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentDtId");
                        });

                    b.Navigation("HierarchyScopeRel");

                    b.Navigation("Property")
                        .IsRequired();

                    b.Navigation("Responsible");

                    b.Navigation("SpatialDefinition");

                    b.Navigation("UseOrg");
                });

            modelBuilder.Entity("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.EquipmentClass", b =>
                {
                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.HierarchyScope", "HierarchyScopeRel")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeRelDtId");

                    b.OwnsOne("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.EquipmentClassProperty", "Property", b1 =>
                        {
                            b1.Property<Guid>("EquipmentClassDtId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("EquipmentClassDtId");

                            b1.ToTable("EquipmentClass");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentClassDtId");
                        });

                    b.Navigation("HierarchyScopeRel");

                    b.Navigation("Property")
                        .IsRequired();
                });

            modelBuilder.Entity("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.PhysicalAsset", b =>
                {
                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.HierarchyScope", "HierarchyScopeRel")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeRelDtId");

                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.OperationalLocation.OperationalLocation", "PhysicalLocationRel")
                        .WithMany()
                        .HasForeignKey("PhysicalLocationRelDtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MOM.Domain.isa95.CommonObjectModels.SpatialDefinition", "SpatialDefinition", b1 =>
                        {
                            b1.Property<Guid>("PhysicalAssetDtId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SRIAuthority")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SRID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhysicalAssetDtId");

                            b1.ToTable("PhysicalAsset");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetDtId");
                        });

                    b.OwnsOne("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.PhysicalAssetProperty", "Property", b1 =>
                        {
                            b1.Property<Guid>("PhysicalAssetDtId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("PhysicalAssetDtId");

                            b1.ToTable("PhysicalAsset");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetDtId");
                        });

                    b.Navigation("HierarchyScopeRel");

                    b.Navigation("PhysicalLocationRel");

                    b.Navigation("Property")
                        .IsRequired();

                    b.Navigation("SpatialDefinition")
                        .IsRequired();
                });

            modelBuilder.Entity("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.PhysicalAssetClass", b =>
                {
                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.HierarchyScope", "HierarchyScopeRel")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeRelDtId");

                    b.OwnsOne("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.PhysicalAssetClassProperty", "Property", b1 =>
                        {
                            b1.Property<Guid>("PhysicalAssetClassDtId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("PhysicalAssetClassDtId");

                            b1.ToTable("PhysicalAssetClass");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetClassDtId");
                        });

                    b.Navigation("HierarchyScopeRel");

                    b.Navigation("Property")
                        .IsRequired();
                });

            modelBuilder.Entity("MOM.Domain.Common.Relationship.isa95.Equipment.EquipmentDefinedByRelationship", b =>
                {
                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.Equipment", "Source")
                        .WithMany("DefinedBy")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.EquipmentClass", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("MOM.Domain.Common.Relationship.isa95.Equipment.EquipmentImplementedByRelationship", b =>
                {
                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.Equipment", "Source")
                        .WithOne("ImplementedBy")
                        .HasForeignKey("MOM.Domain.Common.Relationship.isa95.Equipment.EquipmentImplementedByRelationship", "SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.PhysicalAsset", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("MOM.Domain.Common.Relationship.isa95.Equipment.EquipmentIsMadeUpOfRelationship", b =>
                {
                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.Equipment", "Source")
                        .WithMany("IsMadeUpOf")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.Equipment", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("MOM.Domain.Common.Relationship.isa95.EquipmentClass.EquipmentClassIncludesPropertiesOfRelationship", b =>
                {
                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.EquipmentClass", "Source")
                        .WithMany("IncludesPropertiesOf")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.EquipmentClass", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("MOM.Domain.Common.Relationship.isa95.EquipmentClass.EquipmentClassIsMadeUpOfRelationship", b =>
                {
                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.EquipmentClass", "Source")
                        .WithMany("IsMadeUpOf")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.EquipmentClass", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("MOM.Domain.Common.Relationship.isa95.HierarchyScope.HierarchyScopeContainsRelationship", b =>
                {
                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.HierarchyScope", "Source")
                        .WithMany("Contains")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.HierarchyScope", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("MOM.Domain.Common.Relationship.isa95.OperationalLocation.OperationalLocationDefinedByRelationship", b =>
                {
                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.OperationalLocation.OperationalLocation", "Source")
                        .WithMany("DefinedBy")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.OperationalLocation.OperationalLocationClass", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("MOM.Domain.Common.Relationship.isa95.OperationalLocation.OperationalLocationIsMadeUpOfRelationship", b =>
                {
                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.OperationalLocation.OperationalLocation", "Source")
                        .WithMany("IsMadeUpOf")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.OperationalLocation.OperationalLocation", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("MOM.Domain.Common.Relationship.isa95.OperationalLocationClass.OperationalLocationClassIncludesPropertiesOfRelationship", b =>
                {
                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.OperationalLocation.OperationalLocationClass", "Source")
                        .WithMany("IncludesPropertiesOf")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.OperationalLocation.OperationalLocationClass", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("MOM.Domain.Common.Relationship.isa95.OperationalLocationClass.OperationalLocationClassIsMadeUpOfRelationship", b =>
                {
                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.OperationalLocation.OperationalLocationClass", "Source")
                        .WithMany("IsMadeUpOf")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.OperationalLocation.OperationalLocationClass", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("MOM.Domain.Common.Relationship.isa95.Person.PersonDefinedByRelationship", b =>
                {
                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.Personnel.Person", "Source")
                        .WithMany("DefinedBy")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.Personnel.PersonnelClass", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("MOM.Domain.Common.Relationship.isa95.Person.PersonHierarchyScopeRelRelationship", b =>
                {
                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.Personnel.Person", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.HierarchyScope", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("MOM.Domain.Common.Relationship.isa95.PersonnelClass.PersonnelClassIncludesPropertiesOfRelationship", b =>
                {
                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.Personnel.PersonnelClass", "Source")
                        .WithMany("IncludesPropertiesOf")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.Personnel.PersonnelClass", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("MOM.Domain.Common.Relationship.isa95.PhysicalAsset.PhysicalAssetDefinedByRelationship", b =>
                {
                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.PhysicalAsset", "Source")
                        .WithMany("DefinedBy")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.PhysicalAssetClass", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("MOM.Domain.Common.Relationship.isa95.PhysicalAsset.PhysicalAssetIsMadeUpOfRelationship", b =>
                {
                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.PhysicalAsset", "Source")
                        .WithMany("IsMadeUpOf")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.PhysicalAsset", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("MOM.Domain.Common.Relationship.isa95.PhysicalAssetClass.PhysicalAssetClassIncludesPropertiesOfRelationship", b =>
                {
                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.PhysicalAssetClass", "Source")
                        .WithMany("IncludesPropertiesOf")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.PhysicalAssetClass", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("MOM.Domain.Common.Relationship.isa95.PhysicalAssetClass.PhysicalAssetClassIsMadeUpOfRelationship", b =>
                {
                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.PhysicalAssetClass", "Source")
                        .WithMany("IsMadeUpOf")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.PhysicalAssetClass", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("MOM.Domain.CodingRule.CodingRule", b =>
                {
                    b.Navigation("Segments");
                });

            modelBuilder.Entity("MOM.Domain.Permission.Menu", b =>
                {
                    b.Navigation("Buttons");

                    b.Navigation("Children");
                });

            modelBuilder.Entity("MOM.Domain.isa95.CommonObjectModels.HierarchyScope", b =>
                {
                    b.Navigation("Contains");

                    b.Navigation("Peoples");

                    b.Navigation("Permissions");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("MOM.Domain.isa95.CommonObjectModels.Part2.OperationalLocation.OperationalLocation", b =>
                {
                    b.Navigation("DefinedBy");

                    b.Navigation("IsMadeUpOf");
                });

            modelBuilder.Entity("MOM.Domain.isa95.CommonObjectModels.Part2.OperationalLocation.OperationalLocationClass", b =>
                {
                    b.Navigation("IncludesPropertiesOf");

                    b.Navigation("IsMadeUpOf");
                });

            modelBuilder.Entity("MOM.Domain.isa95.CommonObjectModels.Part2.Personnel.Person", b =>
                {
                    b.Navigation("AvailablePermissions");

                    b.Navigation("DefinedBy");
                });

            modelBuilder.Entity("MOM.Domain.isa95.CommonObjectModels.Part2.Personnel.PersonnelClass", b =>
                {
                    b.Navigation("IncludesPropertiesOf");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.Equipment", b =>
                {
                    b.Navigation("DefinedBy");

                    b.Navigation("ImplementedBy")
                        .IsRequired();

                    b.Navigation("IsMadeUpOf");
                });

            modelBuilder.Entity("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.EquipmentClass", b =>
                {
                    b.Navigation("IncludesPropertiesOf");

                    b.Navigation("IsMadeUpOf");
                });

            modelBuilder.Entity("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.PhysicalAsset", b =>
                {
                    b.Navigation("DefinedBy");

                    b.Navigation("IsMadeUpOf");
                });

            modelBuilder.Entity("MOM.Domain.isa95.CommonObjectModels.Part2.PhysicalAssetAndEquipment.PhysicalAssetClass", b =>
                {
                    b.Navigation("IncludesPropertiesOf");

                    b.Navigation("IsMadeUpOf");
                });
#pragma warning restore 612, 618
        }
    }
}
